{"showCoverPage":false,"bookCover":{"coverDescription":"<p style=\"text-align:center\"></p>"},"chapters":[{"params":{"content":[{"content":{"params":{"text":"<p> </p>\n\n<p><span style=\"font-size:19.5px\">Predict.py</span></p>\n\n<p>On the Pi, there is a python file called predict.py that contains the program we will use to run the machine learning models. You don't need to have a deep understanding in order to use it, but this is an overview to gain an idea of what the code does. </p>\n\n<pre><code>import argparse\nimport subprocess\nimport tflite_runtime.interpreter as tflite\nimport numpy as np\nfrom PIL import Image\nimport time\nimport glob</code></pre>\n\n<p>The first few lines imports the libraries and gives us access to functions and tools that we will need to run the models.</p>\n\n<pre><code>try:\n  cam = picamera.PiCamera()\n  cam.resolution = (224,224)\n  cam.rotation = 180\nexcept:\n  print(\"no camera detected\")\n  cam = None\n</code></pre>\n\n<p>Then the code attempts to find the camera connected to the Pi, set the resolution, and rotates the camera feed 180 degrees because the camera usually sits upside down. If it cannot find the camera, it will print a statement saying as such to the terminal so you know what went wrong.</p>\n\n<pre><code>def feed(lst_globs):\n  if lst_globs == \"\":\n    while True:\n      cam.capture(\"images/camera-feed.jpg\")\n      yield \"images/camera-feed.jpg\"\n  else:\n    for img_glob in sources[src_i][1]:\n      for img_path in glob.glob(img_glob):\n        yield img_path\n\n</code></pre>\n\n<p>Since we have 2 potential sources that the model can use to analyse and predict, the feed function helps the program by making both sources look the same to the rest of the code.</p>\n\n<pre><code>argparser = argparse.ArgumentParser(description=\"Run a Model on a set of images&gt;\nargparser.add_argument(\"--model\", metavar=\"M\", type=int, help=\"the index of the&gt;\nargparser.add_argument(\"--source\", metavar=\"S\", type=int, help=\"the index of th&gt;\nargs = argparser.parse_args()\n\n</code></pre>\n\n<p>When you run this file in the terminal, the program needs to know what model and source you choose.The above code handles this by reading what you wrote in the command line.</p>\n\n<pre><code>models = [(\"MobileNet V1 224\",\"models/mobilenet_v1_1.0_224_quant\"),\n          (\"MobileNet V1 128\",\"models/mobilenet_v1_0.25_128_quant\"),\n          (\"Inception V4\", \"models/inception_v4_quant\"),\n          (\"Custom: Is the camera covered?\", \"models/covered_quant\")\n         ]\n\nsources = [(\"Example Images\",[\"images/224x224/*\",\n                              \"images/room.jpg\",\n                              \"images/239x215/*\",\n                              \"images/128x128/*\",\n                              \"images/imagenet_examples/*\"\n                              ]),\n           (\"Camera\",\"\")\n          ]\n\n</code></pre>\n\n<p>The available models you can run are stored in a list called 'models' and the available sources you can use are stored in a list called 'sources'. When you make your own model, you'll be adding it to the list of models seen above.</p>\n\n<pre><code>if args.model is None:\n  print(\"Which model would you like to run?\")\n  for i, mod in enumerate(models):\n    print(f\"({i}) {mod[0]}\")\n  model_i = int(input())\nelse:\n  model_i = args.model\n\nif args.source is None:\n  print(\"Which source would you like predict from?\")\n  for i, src in enumerate(sources):\n    print(f\"({i}) {src[0]}\")\n  src_i = int(input())\nelse:\n  src_i = args.source\n\n\n</code></pre>\n\n<p>If you don't specify what model and source you want to run in the command line, the program will ask you in the terminal once it is running. You can then enter the number corresponding to the model/source in the terminal and press enter.</p>\n\n<pre><code>if args.model is None:\n  print(\"Which model would you like to run?\")\n  for i, mod in enumerate(models):\n    print(f\"({i}) {mod[0]}\")\n  model_i = int(input())\nelse:\n  model_i = args.model\n\nif args.source is None:\n  print(\"Which source would you like predict from?\")\n  for i, src in enumerate(sources):\n    print(f\"({i}) {src[0]}\")\n  src_i = int(input())\nelse:\n  src_i = args.source\n\n\n</code></pre>\n\n<p>The rest of the code in predict.py reads the model file saved on the Pi and runs it, printing out the results to the terminal so you can see what's happening.</p>\n"},"library":"H5P.AdvancedText 1.1","metadata":{"contentType":"Text","license":"U","title":"Untitled Text","authors":[],"changes":[]},"subContentId":"cde8a0a1-d47b-4535-bad9-765879ecc03a"},"useSeparator":"auto"},{"content":{"params":{"media":{"disableImageZooming":false},"text":"<p>Fill in the missing words</p>\n","overallFeedback":[{"from":0,"to":100}],"showSolutions":"Show solution","tryAgain":"Retry","checkAnswer":"Check","submitAnswer":"Submit","notFilledOut":"Please fill in all blanks to view solution","answerIsCorrect":"&#039;:ans&#039; is correct","answerIsWrong":"&#039;:ans&#039; is wrong","answeredCorrectly":"Answered correctly","answeredIncorrectly":"Answered incorrectly","solutionLabel":"Correct answer:","inputLabel":"Blank input @num of @total","inputHasTipLabel":"Tip available","tipLabel":"Tip","behaviour":{"enableRetry":true,"enableSolutionsButton":true,"enableCheckButton":true,"autoCheck":false,"caseSensitive":true,"showSolutionsRequiresInput":true,"separateLines":false,"confirmCheckDialog":false,"confirmRetryDialog":false,"acceptSpellingErrors":false},"scoreBarLabel":"You got :num out of :total points","a11yCheck":"Check the answers. The responses will be marked as correct, incorrect, or unanswered.","a11yShowSolution":"Show the solution. The task will be marked with its correct solution.","a11yRetry":"Retry the task. Reset all responses and start the task over again.","a11yCheckingModeHeader":"Checking mode","confirmCheck":{"header":"Finish ?","body":"Are you sure you wish to finish ?","cancelLabel":"Cancel","confirmLabel":"Finish"},"confirmRetry":{"header":"Retry ?","body":"Are you sure you wish to retry ?","cancelLabel":"Cancel","confirmLabel":"Confirm"},"questions":["<p>The *feed* function handles the sources so that they look the same to the rest of the code.</p>\n\n<p>If the program cannot find the camera, it will print the statement '*no camera detected*'.</p>\n\n<p>The available models that the program can run are in a list called *models*.</p>\n"]},"library":"H5P.Blanks 1.14","metadata":{"contentType":"Fill in the Blanks","license":"U","title":"Predict.py Functions","authors":[],"changes":[],"extraTitle":"Predict.py Functions"},"subContentId":"db9a62f6-2d4f-417a-abfd-07fe97fb03d2"},"useSeparator":"auto"}]},"library":"H5P.Column 1.15","subContentId":"b1a81e0b-48a0-4bc2-b653-23cba04b1451","metadata":{"contentType":"Column","license":"U","title":"Predict.py","authors":[],"changes":[],"extraTitle":"Predict.py"}},{"params":{"content":[{"content":{"params":{"text":"<p> </p>\n\n<p><span style=\"font-size:1.5em\">Run an existing model</span></p>\n\n<p>File the file is simple, just type in the following command:</p>\n\n<pre><code>python predict.py</code></pre>\n\n<p>The terminal will ask you what model you would like to run, select one of the listed models by typing in the number beside a model and pressing enter. It will then ask what source you want to use, this refers to the pictures the model will analyse, pick a source by typing in the corresponding number and press enter.</p>\n\n<p>The model should now be running! You should see the results being printed in the terminal as it runs. To stop the model, type Crtl+C.</p>\n\n<p><span style=\"font-size:1.5em\">Didn't work?</span></p>\n\n<p>Don't stress, try some of the below fixes:</p>\n\n<p>- Ensure the camera is connected properly and is working. You can do this by running the command Raspistill -o captures/testimg.jpg. This will take a picture with the camera and save it to the captures directory, if the image is there, the camera is connected, but if there was an error go back to the connecting camera section to figure out the issue.</p>\n\n<p>- Error: no such file of directory. This error can occur if SPI isn't enabled, to enable it run the command sudo raspi-config and go to the interface menu, then select SPI and enable it. Now try running the predict.py file again.</p>\n"},"library":"H5P.AdvancedText 1.1","metadata":{"contentType":"Text","license":"U","title":"Untitled Text","authors":[],"changes":[]},"subContentId":"d268c940-6570-48f4-8546-0f31022da729"},"useSeparator":"auto"},{"content":{"params":{"media":{"disableImageZooming":false},"answers":[{"correct":true,"tipsAndFeedback":{"tip":"","chosenFeedback":"","notChosenFeedback":""},"text":"<div>Which source would you like predict from?</div>\n"},{"correct":false,"tipsAndFeedback":{"tip":"","chosenFeedback":"","notChosenFeedback":""},"text":"<div>Which source would you like to use?</div>\n"},{"correct":false,"tipsAndFeedback":{"tip":"","chosenFeedback":"","notChosenFeedback":""},"text":"<div>Please pick a source to predict from.</div>\n"}],"overallFeedback":[{"from":0,"to":100}],"behaviour":{"enableRetry":true,"enableSolutionsButton":true,"enableCheckButton":true,"type":"auto","singlePoint":false,"randomAnswers":true,"showSolutionsRequiresInput":true,"confirmCheckDialog":false,"confirmRetryDialog":false,"autoCheck":false,"passPercentage":100,"showScorePoints":true},"UI":{"checkAnswerButton":"Check","submitAnswerButton":"Submit","showSolutionButton":"Show solution","tryAgainButton":"Retry","tipsLabel":"Show tip","scoreBarLabel":"You got :num out of :total points","tipAvailable":"Tip available","feedbackAvailable":"Feedback available","readFeedback":"Read feedback","wrongAnswer":"Wrong answer","correctAnswer":"Correct answer","shouldCheck":"Should have been checked","shouldNotCheck":"Should not have been checked","noInput":"Please answer before viewing the solution","a11yCheck":"Check the answers. The responses will be marked as correct, incorrect, or unanswered.","a11yShowSolution":"Show the solution. The task will be marked with its correct solution.","a11yRetry":"Retry the task. Reset all responses and start the task over again."},"confirmCheck":{"header":"Finish ?","body":"Are you sure you wish to finish ?","cancelLabel":"Cancel","confirmLabel":"Finish"},"confirmRetry":{"header":"Retry ?","body":"Are you sure you wish to retry ?","cancelLabel":"Cancel","confirmLabel":"Confirm"},"question":"<p>What does the prompt say when you're asked to choose a source?</p>\n"},"library":"H5P.MultiChoice 1.16","metadata":{"contentType":"Multiple Choice","license":"U","title":"run predict.py output","authors":[],"changes":[],"extraTitle":"run predict.py output"},"subContentId":"5f2a47c9-dff2-4d70-9984-f7c39a7ea708"},"useSeparator":"auto"}]},"library":"H5P.Column 1.15","subContentId":"8c6a743b-6935-4ca1-9cd1-4dca2c1556eb","metadata":{"contentType":"Column","license":"U","title":"Running the model","authors":[],"changes":[],"extraTitle":"Running the model"}},{"params":{"content":[{"content":{"params":{"text":"<p> </p>\n\n<p><span style=\"font-size:1.5em\">The model results</span></p>\n\n<p>All of the models on the Pi have been trained using a image database called ImageNet. ImageNet contains over 14 million images with 1000 different objects identified in the images. Watch <a href=\"https://www.youtube.com/watch?v=SfqN-Hc5two\" target=\"_blank\">this video</a> to learn about ImageNet (the video dicusses multiple databases, just watch the first section on ImageNet).</p>\n\n<p>The objects that the model should detect are chosen and then the model uses the ImageNet pictures to learn how to identify the objects. It is then given new images as the model is run, and the model attempts to apply what it learned and predict what objects are in the photo. While it is running, the model's results will be printed on the terminal. For each image (the camera feed will be read in as a stream of images) it will print the name of the object that it thinks is most likely in the picture, and a percentage value of how certain the model is. In the below picture, you can see that the model has determined that there is a 27% chance the picture contains a coffee mug.</p>\n"},"library":"H5P.AdvancedText 1.1","metadata":{"contentType":"Text","license":"U","title":"Untitled Text","authors":[],"changes":[]},"subContentId":"8595110d-2020-41d0-8f97-2a4cb80014cf"},"useSeparator":"auto"},{"content":{"params":{"decorative":false,"contentName":"Image","file":{"path":"images/file-TC0RsHth.png","mime":"image/png","copyright":{"license":"U"},"width":1881,"height":947},"alt":"Model 1 results output"},"library":"H5P.Image 1.1","metadata":{"contentType":"Image","license":"U","title":"Untitled Image","authors":[],"changes":[]},"subContentId":"b39c3867-cfed-47bf-8ab1-0858ca8ced7a"},"useSeparator":"auto"},{"content":{"params":{"text":"<p> </p>\n\n<p><span style=\"font-size:1.5em\">Exporting the results</span></p>\n\n<p>Unsure how to do this.</p>\n"},"library":"H5P.AdvancedText 1.1","metadata":{"contentType":"Text","license":"U","title":"Untitled Text","authors":[],"changes":[]},"subContentId":"07eb975d-b1e1-4f4d-97ae-492438f29301"},"useSeparator":"auto"}]},"library":"H5P.Column 1.15","subContentId":"7436c146-dba4-4b62-b8cc-f79d3a47229d","metadata":{"contentType":"Column","license":"U","title":"Results","authors":[],"changes":[],"extraTitle":"Results"}},{"params":{"content":[{"content":{"params":{"text":"<p> </p>\n\n<p><span style=\"font-size:19.5px\">Model not running?</span></p>\n\n<p>Predict.py uses a few libraries and tools that could be causing an error when you try to run the program, so first let's make sure these are all properly installed and updated. To update the Pi, run the following commands separately:</p>\n\n<pre><code>sudo apt-get update\nsudo apt-get upgrade\n</code></pre>\n\n<p>The prgoram uses the following tools and libraries:</p>\n\n<ul>\n\t<li><code>git</code>: So we can grab the code from Bitbucket</li>\n\t<li><code>pip</code>: The python package manager - this is how we will install the majority of our python libraries.</li>\n\t<li><code>python3-numpy</code>: We need to install this for compatability reasons.</li>\n\t<li><code>libjpeg-dev</code>: We need to install this for the python library <code>Pillow</code></li>\n\t<li><code>tflite-runtime</code>: python library Tensorflow lite</li>\n\t<li><code>Pillow</code>: python library for inteacting with images.</li>\n</ul>\n\n<p>If you get an error message with something like:</p>\n\n<pre>ModuleNotFoundError: No module named 'Pillow'</pre>\n\n<p>The library may not be properly installed, try running the following command (replacing Pillow with the module in your error):</p>\n\n<pre><code>pip install Pillow</code></pre>\n\n<p>Now try rerunning the predict.py program, and if you get another module not found error for a different model repeat these steps until it's no longer appearing.</p>\n"},"library":"H5P.AdvancedText 1.1","metadata":{"contentType":"Text","license":"U","title":"Untitled Text","authors":[],"changes":[]},"subContentId":"585efa27-9f05-4e98-bc74-b60b22e3d61e"},"useSeparator":"auto"}]},"library":"H5P.Column 1.15","subContentId":"125b5a12-3b3d-4740-becc-52c1a841987d","metadata":{"contentType":"Column","license":"U","title":"Troubleshooting","authors":[],"changes":[],"extraTitle":"Troubleshooting"}}],"behaviour":{"defaultTableOfContents":true,"progressIndicators":true,"progressAuto":true,"displaySummary":true,"baseColor":"#1768c4"},"read":"Read","displayTOC":"Display &#039;Table of contents&#039;","hideTOC":"Hide &#039;Table of contents&#039;","nextPage":"Next page","previousPage":"Previous page","chapterCompleted":"Page completed!","partCompleted":"@pages of @total completed","incompleteChapter":"Incomplete page","navigateToTop":"Navigate to the top","markAsFinished":"I have finished this page","fullscreen":"Fullscreen","exitFullscreen":"Exit fullscreen","bookProgressSubtext":"@count of @total pages","interactionsProgressSubtext":"@count of @total interactions","submitReport":"Submit Report","restartLabel":"Restart","summaryHeader":"Summary","allInteractions":"All interactions","unansweredInteractions":"Unanswered interactions","scoreText":"@score / @maxscore","leftOutOfTotalCompleted":"@left of @max interactions completed","noInteractions":"No interactions","score":"Score","summaryAndSubmit":"Summary &amp; submit","noChapterInteractionBoldText":"You have not interacted with any pages.","noChapterInteractionText":"You have to interact with at least one page before you can see the summary.","yourAnswersAreSubmittedForReview":"Your answers are submitted for review!","bookProgress":"Book progress","interactionsProgress":"Interactions progress","totalScoreLabel":"Total score","a11y":{"progress":"Page @page of @total.","menu":"Toggle navigation menu"}}